#!/usr/bin/perl
#
# Based on http://css.setti.info/downloads/munin-srcds-plugin/
#
# 2007-06-26
# Written by Ghost
#
# 2008-04-16
# Update: Wildcard version
#
# 2008-11-12
# Update: Perl RCON system
#
# 2014-03-11
# Benjamin Neff <benjamin@coding4coffee.ch>
# Update: Use status and add Bots
# Update: use dynamic env variables
#
# Configuration variables
#
#   rcon_<port>       - RCON password
#   maxplayers_<port> - Maximum number of players (optional, default: 32)
#
# Magic markers - optional - used by installation scripts and
# munin-config:
#
#%# family=contrib
#%# capabilities=autoconf


use strict;

# Set library path correctly
use File::Basename;
if (-l $0) {
    push(@INC, dirname(readlink($0)));
}
push(@INC, dirname($0));

# Load Rcon module or exit with failuer message
if (!eval "require Rcon") {
    print "Failed to load Rcon module. ";
    print "Make sure Rcon.pm is copied to Munin plugins directory.\n";
    exit 1;
}

# Parse hostname and port from the plugin filename
my ($HOST, $PORT) = $0 =~ m/.*_([^:]+)_(\d+)$/;
if (!defined($HOST) || !defined($PORT)) {
    print "Could not parse server address from filename.\n";
    exit 1;
}

my $rconvar = "rcon_$PORT";

# Load config variables or use default values
my $PASS    = $ENV{"rcon_$PORT"}       || "";
my $MAX     = $ENV{"maxplayers_$PORT"} || 32;

# Print config or do plugin test if asked
my $arg = shift();
if ($arg eq 'config') {
    print_config();
} elsif ($arg eq 'autoconf') {
    test_service();
}


#
# Main program starts here
#

my $sock = Rcon::sock_connect($HOST, $PORT);
if (!$sock) {
    print "Could not open socket to $HOST:$PORT.\n";
    exit 1;
}
if (!Rcon::rcon_auth($sock, $PASS)) {
    print "Could not authenticate.\n";
    exit 1;
}

my $reply = Rcon::rcon_command($sock, "status");
if (!defined($reply)) {
    print "Did not receive reply from server.\n";
    exit 1;
}
my @reply = split(/\n/, $reply);
my $players = 0;
my $bots = 0;

foreach my $statline (@reply) {
    if ($statline =~ m/#\s*\d+\s*".*"\s*STEAM[\w:]*/) {
        $players++;
    }
    if ($statline =~ m/#\s*\d+\s*".*"\s*BOT*/) {
        $bots++;
    }
}
print "players.value $players\n";
print "bots.value $bots\n";


sub print_config {
    print("graph_title Number of players at $HOST:$PORT\n",
	  "graph_args --base 1000\n",
	  "graph_vlabel Players\n",
	  "graph_category SourceDS\n",
	  "graph_info The number of players on Source game server, such as TF2, L4D2, HL2, CS:S and DoD:S.\n");

    print ("players.label Players\n",
	   "players.min 0\n",
	   "players.max $MAX\n",
	   "players.type GAUGE\n");
    print ("bots.label Bots\n",
	   "bots.min 0\n",
	   "bots.max $MAX\n",
	   "bots.type GAUGE\n");
    exit 0;
}


sub test_service {
    my $sock = Rcon::sock_connect($HOST, $PORT);
    if (!$sock) {
	print "no (could not open socket to $HOST:$PORT)\n";
	exit 1;
    }
    if (!Rcon::rcon_auth($sock, $PASS)) {
	print "no (could not authenticate)\n";
	exit 1;
    }
    if (!defined(Rcon::rcon_command($sock, "status"))) {
	print "no (did not receive reply from server)\n";
	exit 1;
    }

    print "yes\n";
    exit 0;
}
